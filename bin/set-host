#!/usr/bin/env bash

usage() {
  cat <<EOF
Usage: ${PROG} [options] [[domain] [ip-address] ...]
Setting this host local resolution rules for the specified domain.

Example:
  ${PROG} example.com 127.0.0.1
  ${PROG} -o example.com 127.0.0.1

Options:
  -o, --OVERWRITE           if the rule exists, OVERWRITE the rule
  -h, --help                display this help and exit
EOF
}

valid_ip_address() {
  local ipv4_re="^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$"
  if [[ $1 =~ $ipv4_re ]]; then
    return
  fi
  local ipv6_re="^([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}$"
  if [[ $1 =~ $ipv6_re ]]; then
    return
  fi
  echo "The ip address is not valid: $1." >&2
  exit 1
}

setting_dns() {
  if [ $# -ne 2 ]; then
    echo "Please provide the missing domain or ip address: $*." >&2
    exit 1
  fi
  valid_ip_address "$2"

  # see https://stackoverflow.com/questions/19339248/append-line-to-etc-hosts-file-with-shell-script
  local match_line_number
  local host_record="$2 $1"
  # Fix mismatch caused by '.' character in domain. For example, b.com will match the github.com.
  match_line_number=$(grep -n "^[^#].*\b${1//./\.}" /etc/hosts | cut -f1 -d:)

  if [ -n "$match_line_number" ]; then
    if [ "$OVERWRITE" -eq 0 ]; then
      # iterate over the line numbers on which matches were found
      while read -r line_number; do
        sudo sed -i '' "${line_number}s/.*/${host_record}/" /etc/hosts
        printf "%s\t%s\t%s\n" "$2" "$1" "Overwritten"
      done <<<"$match_line_number"
    fi
  else
    echo "$host_record" | sudo tee -a /etc/hosts >/dev/null
    printf "%s\t%s\t%s\n" "$2" "$1" "Added"
  fi
}

PROG="$(basename "$0")"
readonly PROG
OVERWRITE=1

if [ "$#" -eq 0 ]; then
  usage >&2 && exit 1
fi

while [ "$#" -gt 0 ]; do
  case "$1" in
  -o | --overwrite)
    OVERWRITE=0
    shift
    ;;
  -h | --help)
    usage && exit 0
    ;;
  -*)
    echo "Unrecognized option '$1'" >&2
    usage >&2 && exit 1
    ;;
  *)
    setting_dns "$1" "$2"
    shift 2
    ;;
  esac
done
